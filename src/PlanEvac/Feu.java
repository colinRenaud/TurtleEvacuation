package PlanEvac;

import java.awt.Color;
import turtlekit.kernel.Turtle;
import turtlekit.kernel.TurtleKit.Option;
import turtlekit.pheromone.Pheromone;
import turtlekit.viewer.PheromoneViewer;
import Utiles.NewAgentTurtle;

public class Feu extends Turtle{

	protected Pheromone s;
	private int dureePresence; // duration of the fire
	private final int timeToSpread = 500; // each timeBound speed there is a fire generation
	private boolean propagé = false; // is the fire generated by an other fire ?
	private int newX; // new x and y  coordinates according to the coordinates of the fire genrator 
	private int newY;
	private int nbPropagation; // number of fire generated b the current fire
	private int propagationAngle; // angle of generation of the next fire 
	private final int distanceWithOld = 10; // distance between current and new fire generated 
	private final int nbPropagationMAX = 4 ; // number of fire which can be generated by a fire 
	/**
	 * 
	 */
	protected void activate(){
		super.activate();
		setNextAction("act");
		setColor(Color.red);
		s = getEnvironment().getPheromone(getMadkitProperty("pheroName"), 20,50); // evaporation / diffusion : 20/50
		while(getPatch().getColor().getRed() != 1) 
			randomLocation();
		dureePresence = 0;
		nbPropagation = 0;
		propagationAngle = 0;
		if(propagé) {
			setX(newX);
			setY(newY);
		}
	}

	@SuppressWarnings("deprecation")
	/**
	 * @return
	 */
	protected String act(){
		s.incValue(xcor(), ycor() , 10000);
		int i = (int) (Math.random()*10 - 5 + this.s.getEvaporationCoefficient());
		if (i<7)
			i = 7;
		if(i>50)
			i = 50;
		s.setEvaporationPercentage(i);
		dureePresence ++; // new turn
		if(dureePresence % timeToSpread == 0)  // each time bound speed there is fire generation
			toSpread();
		return "act";	
	}

	/**
	 * make the fire to spread 
	 */

	protected void toSpread() {
		if(nbPropagation < nbPropagationMAX + 1) {
			nbPropagation++;
			int x = (int) (xcor() + distanceWithOld *  +Math.cos(Math.toRadians(propagationAngle))); 
			int y = (int) (ycor() + distanceWithOld * +Math.sin(Math.toRadians(propagationAngle)));
			if(getEnvironment().getPheromone(getMadkitProperty("pheroName")).get(xcor(),ycor()) >  2) {
				Feu f1 = new Feu();
				f1.propagé = true;		
				f1.newX = x; //  generated fire is moved according to the angus with the generator fire
				f1.newY = y;
				launchAgent(f1);
			}
			else {
				nbPropagation--;
			}
			propagationAngle += 90; // the next fire will not have the same emplacement as the last generated fire	
		}	
	}


}